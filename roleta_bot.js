const axios = require("axios");
const puppeteer = require("puppeteer"); // Voc√™ precisar√° instalar: npm install puppeteer
require("dotenv").config();
const express = require("express");
let ultimoDiaVerificado = new Date().getDate(); // Dia do m√™s atual

// Estado do bot
let historico = [];
let alertaAtivo = false;

// Estrat√©gia de cores
let corAlvo = null;
let rodadaG0Cor = null;
let totalGreensCor = 0;
let totalRedsCor = 0;

// Estrat√©gia de colunas
let colunaAlvo = null;
let rodadaG0Coluna = null;
let totalGreensColuna = 0;
let totalRedsColuna = 0;

// Estrat√©gia de d√∫zias
let duziaAlvo = null;
let rodadaG0Duzia = null;
let totalGreensDuzia = 0;
let totalRedsDuzia = 0;

// Contador de zeros
let totalZeros = 0;

// Rastreamento de sequ√™ncias de cores
let sequenciaAtualVermelho = 0;
let sequenciaAtualPreto = 0;
let maiorSequenciaVermelho = 0;
let maiorSequenciaPreto = 0;
let corUltimoNumero = null;

// Rastreamento de padr√µes laterais (√∫ltimos 8 n√∫meros)
let ultimosOitoNumeros = [];

// Contador geral
let contadorRodadas = 0;

// √öltima vit√≥ria registrada
let ultimaVitoria = {
  numero: null,
  cor: null,
  estrategia: null,
  dataHora: null,
};

// Configura√ß√£o do Telegram
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// N√∫meros vermelhos na roleta
const numerosVermelhos = [
  1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36,
];

// Fun√ß√µes auxiliares
function getCor(numero) {
  if (numero === 0) return "verde";
  if (numerosVermelhos.includes(numero)) return "vermelho";
  return "preto";
}

function getColuna(numero) {
  if (numero === 0) return null;
  return ((numero - 1) % 3) + 1;
}

function getDuzia(numero) {
  if (numero === 0) return null;
  if (numero <= 12) return 1;
  if (numero <= 24) return 2;
  return 3;
}

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

// Fun√ß√£o para rastrear sequ√™ncias de cores
function rastrearSequencias(res) {
  // Ignorar o Zero para fins de rastreamento de sequ√™ncias de cores
  if (res.numero === 0) {
    // Zeros interrompem sequ√™ncias de cores
    sequenciaAtualVermelho = 0;
    sequenciaAtualPreto = 0;
    corUltimoNumero = null;
    return;
  }

  // Rastrear sequ√™ncias de cores
  if (res.cor === "vermelho") {
    // Se o n√∫mero anterior tamb√©m era vermelho, incrementa a sequ√™ncia
    if (corUltimoNumero === "vermelho") {
      sequenciaAtualVermelho++;
    } else {
      // Come√ßa uma nova sequ√™ncia de vermelhos
      sequenciaAtualVermelho = 1;
    }

    // Reseta a sequ√™ncia atual de pretos, pois a sequ√™ncia foi interrompida
    sequenciaAtualPreto = 0;

    // Verifica se a sequ√™ncia atual de vermelhos √© a maior j√° registrada
    if (sequenciaAtualVermelho > maiorSequenciaVermelho) {
      maiorSequenciaVermelho = sequenciaAtualVermelho;
      console.log(
        `Nova maior sequ√™ncia de vermelhos: ${maiorSequenciaVermelho} n√∫meros consecutivos`
      );

      // Notifica sobre a nova maior sequ√™ncia
      if (maiorSequenciaVermelho >= 5) {
        enviarTelegram(`üî• NOVA MAIOR SEQU√äNCIA: ${maiorSequenciaVermelho} vermelhos consecutivos!
Esta √© a maior sequ√™ncia de n√∫meros vermelhos consecutivos detectada at√© agora.`);
      }
    }
  } else if (res.cor === "preto") {
    // Se o n√∫mero anterior tamb√©m era preto, incrementa a sequ√™ncia
    if (corUltimoNumero === "preto") {
      sequenciaAtualPreto++;
    } else {
      // Come√ßa uma nova sequ√™ncia de pretos
      sequenciaAtualPreto = 1;
    }

    // Reseta a sequ√™ncia atual de vermelhos, pois a sequ√™ncia foi interrompida
    sequenciaAtualVermelho = 0;

    // Verifica se a sequ√™ncia atual de pretos √© a maior j√° registrada
    if (sequenciaAtualPreto > maiorSequenciaPreto) {
      maiorSequenciaPreto = sequenciaAtualPreto;
      console.log(
        `Nova maior sequ√™ncia de pretos: ${maiorSequenciaPreto} n√∫meros consecutivos`
      );

      // Notifica sobre a nova maior sequ√™ncia
      if (maiorSequenciaPreto >= 5) {
        enviarTelegram(`‚ö´ NOVA MAIOR SEQU√äNCIA: ${maiorSequenciaPreto} pretos consecutivos!
Esta √© a maior sequ√™ncia de n√∫meros pretos consecutivos detectada at√© agora.`);
      }
    }
  }

  // Atualiza a cor do √∫ltimo n√∫mero para a pr√≥xima compara√ß√£o
  corUltimoNumero = res.cor;

  // Informa√ß√µes de debug para o console
  console.log(`Sequ√™ncia atual de vermelhos: ${sequenciaAtualVermelho}`);
  console.log(`Sequ√™ncia atual de pretos: ${sequenciaAtualPreto}`);
  console.log(
    `Maior sequ√™ncia de vermelhos registrada: ${maiorSequenciaVermelho}`
  );
  console.log(`Maior sequ√™ncia de pretos registrada: ${maiorSequenciaPreto}`);
}

// Armazenar o √∫ltimo resultado processado para compara√ß√£o
let ultimoResultadoProcessado = null;

// Vari√°veis globais para controlar o navegador
let browser = null;
let page = null;

// Fun√ß√£o principal modificada para manter o navegador aberto
async function getRoletaResultado() {
  try {
    console.log("Buscando resultados da roleta...");

    // Inicializar o navegador apenas uma vez
    if (!browser) {
      console.log("Iniciando navegador pela primeira vez...");
      browser = await puppeteer.launch({
        executablePath:
          "/root/.cache/puppeteer/chrome/linux-136.0.7103.92/chrome-linux64/chrome",
        headless: true,
        args: ["--no-sandbox", "--disable-setuid-sandbox"],
      });
      
      console.log("Abrindo nova p√°gina...");
      page = await browser.newPage();
      
      // Configurando o User-Agent para parecer um navegador normal
      await page.setUserAgent(
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
      );
    } else {
      console.log("Navegador j√° est√° aberto, apenas atualizando a p√°gina...");
    }

    // Verificar mudan√ßa de dia a cada execu√ß√£o
    verificarMudancaDeDia();

    // Navegar ou recarregar a p√°gina
    if (page.url() === "https://casinoscores.com/lightning-roulette/") {
      console.log("Recarregando a p√°gina...");
      await page.reload({ waitUntil: "networkidle2", timeout: 60000 });
    } else {
      console.log("Navegando para casinoscores.com...");
      await page.goto("https://casinoscores.com/lightning-roulette/", {
        waitUntil: "networkidle2",
        timeout: 60000,
      });
    }

    console.log("P√°gina carregada, extraindo resultados...");

    // Esperando pelo conte√∫do carregar
    await page
      .waitForSelector("#latestSpinsTag", { timeout: 30000 })
      .catch(() =>
        console.log("Timeout ao esperar pelo seletor, tentando mesmo assim...")
      );

    // Extraindo os n√∫meros usando o seletor espec√≠fico
    const numeros = await page.evaluate(() => {
      const resultados = [];
      const elementos = document.querySelectorAll("#latestSpinsTag .badge");

      elementos.forEach((elem) => {
        const numero = parseInt(elem.textContent.trim(), 10);
        if (!isNaN(numero) && numero >= 0 && numero <= 36) {
          resultados.push(numero);
        }
      });

      return resultados;
    });

    if (!numeros || numeros.length === 0) {
      console.error("N√£o foi poss√≠vel encontrar n√∫meros da roleta.");
      return;
    }

    console.log(
      `Encontrados ${numeros.length} resultados: ${numeros.join(", ")}`
    );

    // Pegamos o resultado mais recente (primeiro da lista)
    const ultimoNumero = numeros[0];
    const ultimaCor = getCor(ultimoNumero);

    const resultado = {
      numero: ultimoNumero,
      cor: ultimaCor,
    };

    console.log(
      `√öltimo resultado do site: ${resultado.numero} (${resultado.cor})`
    );

    // Resto do seu c√≥digo para verificar novos resultados continua igual
    let novoResultado = false;

    if (!ultimoResultadoProcessado) {
      novoResultado = true;
      console.log("Primeiro resultado desde o in√≠cio do programa.");
    } else if (ultimoResultadoProcessado.numero !== resultado.numero) {
      novoResultado = true;
      console.log(
        `Novo n√∫mero detectado: ${resultado.numero} (anterior era ${ultimoResultadoProcessado.numero})`
      );
    } else if (
      numeros.length >= 2 &&
      ultimoResultadoProcessado.segundoNumero !== numeros[1]
    ) {
      novoResultado = true;
      console.log(
        `Mesmo n√∫mero (${resultado.numero}), mas o segundo n√∫mero da lista mudou de ${ultimoResultadoProcessado.segundoNumero} para ${numeros[1]}. Considerando nova rodada.`
      );
    } else {
      console.log(
        `Sem mudan√ßas nos resultados. √öltimo n√∫mero continua sendo ${resultado.numero}.`
      );
    }

    if (novoResultado) {
      console.log("Novo resultado confirmado, atualizando hist√≥rico...");

      // Atualiza o hist√≥rico
      historico.unshift(resultado);
      if (historico.length > 20) historico = historico.slice(0, 20);

      // Rastreia sequ√™ncias de cores
      rastrearSequencias(resultado);

      // Processa o resultado (estrat√©gias)
      await processarResultado(resultado);

      // Atualiza o resultado processado, incluindo o segundo n√∫mero para compara√ß√£o futura
      ultimoResultadoProcessado = {
        numero: resultado.numero,
        cor: resultado.cor,
        segundoNumero: numeros.length >= 2 ? numeros[1] : null,
      };
    } else {
      // Nenhuma mudan√ßa nos resultados
      console.log("Aguardando nova rodada da roleta...");
    }
  } catch (err) {
    console.error("Erro ao capturar resultado:", err.message);
    
    // Se ocorrer um erro grave com o navegador, fechamos e reiniciamos na pr√≥xima execu√ß√£o
    if (err.message.includes("Protocol error") || err.message.includes("Target closed") || err.message.includes("Session closed")) {
      console.error("Erro de conex√£o com o navegador, reiniciando na pr√≥xima execu√ß√£o...");
      try {
        if (page) await page.close().catch(() => {});
        if (browser) await browser.close().catch(() => {});
      } catch (closeErr) {
        console.error("Erro ao fechar navegador:", closeErr.message);
      }
      page = null;
      browser = null;
    }
    
    if (err.response) {
      console.error("Resposta do site:", err.response.status);
      if (err.response.data) {
        console.error(
          "HTML da resposta:",
          err.response.data.substring(0, 200) + "..."
        );
      }
    }
  }
}
// Adicione tamb√©m uma fun√ß√£o para gerenciar o encerramento do processo
process.on('SIGINT', async () => {
  console.log('Encerrando bot graciosamente...');
  if (browser) {
    console.log('Fechando navegador...');
    await browser.close().catch(err => console.error("Erro ao fechar navegador:", err));
  }
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('Recebido sinal de t√©rmino...');
  if (browser) {
    console.log('Fechando navegador...');
    await browser.close().catch(err => console.error("Erro ao fechar navegador:", err));
  }
  process.exit(0);
});

// Estrat√©gia baseada em cores (3 cores iguais seguidas) - CORRIGIDA
async function processarEstrategiaCores(res) {
  // Verifica se h√° um padr√£o de 3 cores iguais consecutivas
  if (!alertaAtivo && !corAlvo && !colunaAlvo && !duziaAlvo && historico.length >= 3) {
    // Importante: analisar da direita para a esquerda
    // No contexto do nosso hist√≥rico, isso significa pegar os √≠ndices 2, 1, 0
    // porque o hist√≥rico vai do mais recente (√≠ndice 0) para o mais antigo
    const sequencia = [historico[2], historico[1], historico[0]];
    const [direita, meio, esquerda] = sequencia;
    
    console.log(`Analisando sequ√™ncia da direita para a esquerda: ${direita.numero} (${direita.cor}), ${meio.numero} (${meio.cor}), ${esquerda.numero} (${esquerda.cor})`);
    
    // Verificamos se o √∫ltimo n√∫mero vencedor ainda est√° na sequ√™ncia que estamos analisando
    let deveIgnorar = false;
    
    if (ultimaVitoria && ultimaVitoria.numero !== null) {
      if (sequencia.some(item => item.numero === ultimaVitoria.numero)) {
        console.log(`Ignorando verifica√ß√£o, pois o n√∫mero vencedor (${ultimaVitoria.numero}) ainda est√° na sequ√™ncia analisada.`);
        deveIgnorar = true;
      }
    }
    
    if (!deveIgnorar) {
      console.log(`Verificando padr√£o de cores (D‚ÜíE): ${direita.cor}, ${meio.cor}, ${esquerda.cor}`);
      if (direita.cor === meio.cor && meio.cor === esquerda.cor && direita.cor !== "verde") {
        alertaAtivo = true;
        corAlvo = direita.cor;
        await enviarTelegram(
          `‚ö†Ô∏è ESTRAT√âGIA DE CORES: 3 ${corAlvo}s seguidos...\nAguardando pr√≥xima rodada para estrat√©gia de cores...`
        );
        console.log(`Alerta ativado para cor! Cor alvo: ${corAlvo}`);
      }
    }
  }
  // Primeira rodada ap√≥s detectar padr√£o para cores (G0)
  else if (
    alertaAtivo &&
    corAlvo &&
    rodadaG0Cor === null &&
    !colunaAlvo &&
    !duziaAlvo
  ) {
    console.log(
      `Alerta ativo para cor, primeira tentativa (G0). Cor alvo: ${corAlvo}`
    );

    if (res.numero === 0) {
      totalZeros++;
      totalGreensCor++;
      await enviarTelegram(
        `üü¢ CORES: N√∫mero 0 caiu! ‚úÖ Green para estrat√©gia de cor\nüìä Cores: Greens: ${totalGreensCor} | Reds: ${totalRedsCor} | Zeros: ${totalZeros}`
      );

      // Marcar este n√∫mero como vencedor
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        dataHora: new Date(),
        estrategia: "cor",
      };
      console.log(
        `Marcando ${res.numero} como √∫ltima vit√≥ria. Pr√≥xima contagem come√ßar√° depois deste n√∫mero.`
      );

      resetarAlertaCores();
    } else if (res.cor === corAlvo) {
      totalGreensCor++;
      await enviarTelegram(
        `üü¢ CORES: ${capitalize(corAlvo)} [${
          res.numero
        }], ‚úÖ Green para estrat√©gia de cor!\nüìä Cores: Greens: ${totalGreensCor} | Reds: ${totalRedsCor} | Zeros: ${totalZeros}`
      );

      // Marcar este n√∫mero como vencedor
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        dataHora: new Date(),
        estrategia: "cor",
      };
      console.log(
        `Marcando ${res.numero} como √∫ltima vit√≥ria. Pr√≥xima contagem come√ßar√° depois deste n√∫mero.`
      );

      resetarAlertaCores();
    } else {
      await enviarTelegram(
        `üîÑ CORES: ${capitalize(res.cor)} [${
          res.numero
        }], vamos para o G1 na estrat√©gia de cor...`
      );
      rodadaG0Cor = res;
      console.log(
        "Primeira tentativa falhou, indo para G1 na estrat√©gia de cor"
      );
    }
  }
  // Segunda rodada ap√≥s detectar padr√£o para cores (G1)
  else if (alertaAtivo && corAlvo && rodadaG0Cor && !colunaAlvo && !duziaAlvo) {
    console.log("Processando G1 para estrat√©gia de cor");

    if (res.numero === 0) {
      totalZeros++;
      totalGreensCor++;
      await enviarTelegram(
        `üü¢ CORES: N√∫mero 0 caiu! ‚úÖ Green no G1 para estrat√©gia de cor\nüìä Cores: Greens: ${totalGreensCor} | Reds: ${totalRedsCor} | Zeros: ${totalZeros}`
      );

      // Marcar este n√∫mero como vencedor
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        dataHora: new Date(),
        estrategia: "cor",
      };
      console.log(
        `Marcando ${res.numero} como √∫ltima vit√≥ria. Pr√≥xima contagem come√ßar√° depois deste n√∫mero.`
      );

      resetarAlertaCores();
    } else if (res.cor === corAlvo) {
      totalGreensCor++;
      await enviarTelegram(
        `üü¢ CORES: ${capitalize(corAlvo)} [${
          res.numero
        }], ‚úÖ Green no G1 para estrat√©gia de cor!\nüìä Cores: Greens: ${totalGreensCor} | Reds: ${totalRedsCor} | Zeros: ${totalZeros}`
      );

      // Marcar este n√∫mero como vencedor
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        dataHora: new Date(),
        estrategia: "cor",
      };
      console.log(
        `Marcando ${res.numero} como √∫ltima vit√≥ria. Pr√≥xima contagem come√ßar√° depois deste n√∫mero.`
      );

      resetarAlertaCores();
    } else {
      totalRedsCor++;
      await enviarTelegram(
        `‚ùå CORES: ${capitalize(res.cor)} [${
          res.numero
        }], ‚ùå Red/perca na estrat√©gia de cor\nüìä Cores: Greens: ${totalGreensCor} | Reds: ${totalRedsCor} | Zeros: ${totalZeros}`
      );

      // Marcar este n√∫mero para saber que a √∫ltima derrota foi na estrat√©gia de cores
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        estrategia: "cor",
        dataHora: new Date(),
      };

      resetarAlertaCores();
    }
  }
}

// Fun√ß√£o para resetar alerta de cores - MODIFICADA
function resetarAlertaCores() {
  console.log("Resetando alerta de cores");
  if (corAlvo) {
    alertaAtivo = false;
    corAlvo = null;
    rodadaG0Cor = null;

    console.log("Estrat√©gia de cores resetada ap√≥s vit√≥ria/derrota");
  }
}

// Estrat√©gia baseada em colunas (8 n√∫meros em 2 colunas)
async function processarEstrategiaColunas(res) {
  // Atualiza o array dos √∫ltimos 8 n√∫meros, excluindo zeros
  if (res.numero !== 0) {
    // Adiciona o novo n√∫mero no in√≠cio do array
    ultimosOitoNumeros.unshift({
      numero: res.numero,
      coluna: getColuna(res.numero),
      duzia: getDuzia(res.numero),
    });

    // Mant√©m apenas os √∫ltimos 8 n√∫meros n√£o-zero
    if (ultimosOitoNumeros.length > 8) {
      ultimosOitoNumeros = ultimosOitoNumeros.slice(0, 8);
    }
  }

  // Verifica padr√£o de colunas apenas se n√£o houver outro alerta ativo
  if (
    !alertaAtivo &&
    !corAlvo &&
    !colunaAlvo &&
    !duziaAlvo &&
    ultimosOitoNumeros.length === 8
  ) {
    // Verificar se temos uma √∫ltima vit√≥ria recente na estrat√©gia de colunas
    let deveIgnorar = false;

    if (
      ultimaVitoria &&
      ultimaVitoria.estrategia === "coluna" &&
      new Date() - ultimaVitoria.dataHora < 5 * 60 * 1000
    ) {
      // 5 minutos
      console.log(
        `Ignorando verifica√ß√£o de colunas, pois tivemos uma vit√≥ria/derrota recente na estrat√©gia de colunas.`
      );
      deveIgnorar = true;
    }

    if (!deveIgnorar) {
      // Obt√©m as colunas dos √∫ltimos 8 n√∫meros
      const colunas = ultimosOitoNumeros.map((n) => n.coluna);

      // Contabiliza quais colunas apareceram
      const contagemColunas = { 1: 0, 2: 0, 3: 0 };
      colunas.forEach((coluna) => contagemColunas[coluna]++);

      // Verifica se s√≥ apareceram 2 colunas distintas (ou seja, uma coluna n√£o apareceu)
      const colunasDistintas = Object.keys(contagemColunas)
        .filter((c) => contagemColunas[c] > 0)
        .map((c) => parseInt(c, 10));

      if (colunasDistintas.length === 2) {
        // Agora utilizamos as colunas que est√£o aparecendo como alvo
        alertaAtivo = true;
        colunaAlvo = colunasDistintas; // colunaAlvo √© um array com as colunas presentes
        const colunasPresentes = colunasDistintas.join(" e ");

        await enviarTelegram(`‚ö†Ô∏è ESTRAT√âGIA DE COLUNAS: Os √∫ltimos 8 n√∫meros ca√≠ram apenas nas colunas ${colunasPresentes}.
üéØ Entrada sugerida nas colunas ${colunasPresentes} na pr√≥xima rodada!`);

        console.log(
          `Alerta de colunas ativado! Colunas alvo: ${colunasPresentes}`
        );
      }
    }
  }

  // Primeira rodada ap√≥s detectar padr√£o para colunas (G0)
  else if (
    alertaAtivo &&
    colunaAlvo &&
    rodadaG0Coluna === null &&
    !corAlvo &&
    !duziaAlvo
  ) {
    console.log(
      `Alerta ativo para coluna, primeira tentativa (G0). Colunas alvo: ${colunaAlvo.join(
        " e "
      )}`
    );

    if (res.numero === 0) {
      totalZeros++;
      totalGreensColuna++;
      await enviarTelegram(
        `üü¢ COLUNAS: N√∫mero 0 caiu! ‚úÖ Green para estrat√©gia de coluna\nüìä Colunas: Greens: ${totalGreensColuna} | Reds: ${totalRedsColuna}`
      );

      // Marcar este n√∫mero como vencedor
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        estrategia: "coluna",
        dataHora: new Date(),
      };

      resetarAlertaColunas();
    } else if (colunaAlvo.includes(getColuna(res.numero))) {
      totalGreensColuna++;
      await enviarTelegram(
        `üü¢ COLUNAS:  [${res.numero}] coluna ${getColuna(
          res.numero
        )}! ‚úÖ Green para estrat√©gia de coluna\nüìä Colunas: Greens: ${totalGreensColuna} | Reds: ${totalRedsColuna}`
      );

      // Marcar este n√∫mero como vencedor
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        estrategia: "coluna",
        dataHora: new Date(),
      };

      resetarAlertaColunas();
    } else {
      await enviarTelegram(
        `üîÑ COLUNAS:  [${res.numero}]  coluna ${getColuna(
          res.numero
        )}, vamos para o G1 na estrat√©gia de coluna...`
      );
      rodadaG0Coluna = res;
      console.log(
        "Primeira tentativa falhou, indo para G1 na estrat√©gia de coluna"
      );
    }
  }
  // Segunda rodada ap√≥s detectar padr√£o para colunas (G1)
  else if (
    alertaAtivo &&
    colunaAlvo &&
    rodadaG0Coluna &&
    !corAlvo &&
    !duziaAlvo
  ) {
    console.log("Processando G1 para estrat√©gia de coluna");

    if (res.numero === 0) {
      totalZeros++;
      totalGreensColuna++;
      await enviarTelegram(
        `üü¢ COLUNAS: N√∫mero 0 caiu! ‚úÖ Green no G1 para estrat√©gia de coluna\nüìä Colunas: Greens: ${totalGreensColuna} | Reds: ${totalRedsColuna}`
      );

      // Marcar este n√∫mero como vencedor
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        estrategia: "coluna",
        dataHora: new Date(),
      };

      resetarAlertaColunas();
    } else if (colunaAlvo.includes(getColuna(res.numero))) {
      totalGreensColuna++;
      await enviarTelegram(
        `üü¢ COLUNAS:  [${res.numero}] coluna ${getColuna(
          res.numero
        )}! ‚úÖ Green no G1 para estrat√©gia de coluna\nüìä Colunas: Greens: ${totalGreensColuna} | Reds: ${totalRedsColuna}`
      );

      // Marcar este n√∫mero como vencedor
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        estrategia: "coluna",
        dataHora: new Date(),
      };

      resetarAlertaColunas();
    } else {
      totalRedsColuna++;
      await enviarTelegram(
        `‚ùå COLUNAS:  [${res.numero}]  coluna ${getColuna(
          res.numero
        )}. ‚ùå Red/perca na estrat√©gia de coluna\nüìä Colunas: Greens: ${totalGreensColuna} | Reds: ${totalRedsColuna}`
      );

      // Ap√≥s uma derrota, tamb√©m marcaremos o estado para evitar contagens imediatas
      ultimaVitoria = {
        estrategia: "coluna",
        dataHora: new Date(),
      };

      resetarAlertaColunas();
    }
  }
}

// Fun√ß√£o para resetar alerta de colunas - MODIFICADA
function resetarAlertaColunas() {
  console.log("Resetando alerta de colunas");
  if (colunaAlvo) {
    alertaAtivo = false;
    colunaAlvo = null;
    rodadaG0Coluna = null;

    // Limpar o hist√≥rico de √∫ltimos oito n√∫meros para for√ßar uma nova contagem
    ultimosOitoNumeros = [];

    console.log(
      "Estrat√©gia de colunas resetada ap√≥s vit√≥ria/derrota. Hist√≥rico de 8 n√∫meros reiniciado."
    );
  }
}

// Estrat√©gia baseada em d√∫zias (8 n√∫meros em 2 d√∫zias)
async function processarEstrategiaDuzias(res) {
  // Verifica√ß√£o de padr√£o de d√∫zias apenas se n√£o houver outro alerta ativo
  if (
    !alertaAtivo &&
    !corAlvo &&
    !colunaAlvo &&
    !duziaAlvo &&
    ultimosOitoNumeros.length === 8
  ) {
    // Verificar se temos uma √∫ltima vit√≥ria recente na estrat√©gia de d√∫zias
    let deveIgnorar = false;

    if (
      ultimaVitoria &&
      ultimaVitoria.estrategia === "duzia" &&
      new Date() - ultimaVitoria.dataHora < 5 * 60 * 1000
    ) {
      // 5 minutos
      console.log(
        `Ignorando verifica√ß√£o de d√∫zias, pois tivemos uma vit√≥ria/derrota recente na estrat√©gia de d√∫zias.`
      );
      deveIgnorar = true;
    }

    if (!deveIgnorar) {
      // Obt√©m as d√∫zias dos √∫ltimos 8 n√∫meros
      const duzias = ultimosOitoNumeros.map((n) => n.duzia);

      // Contabiliza quais d√∫zias apareceram
      const contagemDuzias = { 1: 0, 2: 0, 3: 0 };
      duzias.forEach((duzia) => contagemDuzias[duzia]++);

      // Verifica se s√≥ apareceram 2 d√∫zias distintas (ou seja, uma d√∫zia n√£o apareceu)
      const duziasDistintas = Object.keys(contagemDuzias)
        .filter((d) => contagemDuzias[d] > 0)
        .map((d) => parseInt(d, 10));

      if (duziasDistintas.length === 2) {
        // Agora utilizamos as d√∫zias que est√£o aparecendo como alvo
        alertaAtivo = true;
        duziaAlvo = duziasDistintas; // Agora duziaAlvo √© um array com as d√∫zias presentes
        const duziasPresentes = duziasDistintas.join(" e ");

        await enviarTelegram(`‚ö†Ô∏è ESTRAT√âGIA DE D√öZIAS: Os √∫ltimos 8 n√∫meros ca√≠ram apenas nas d√∫zias ${duziasPresentes}.
üéØ Entrada sugerida nas d√∫zias ${duziasPresentes} na pr√≥xima rodada!`);

        console.log(
          `Alerta de d√∫zias ativado! D√∫zias alvo: ${duziasPresentes}`
        );
      }
    }
  }

  // Primeira rodada ap√≥s detectar padr√£o para d√∫zias (G0)
  else if (
    alertaAtivo &&
    duziaAlvo &&
    rodadaG0Duzia === null &&
    !corAlvo &&
    !colunaAlvo
  ) {
    console.log(
      `Alerta ativo para d√∫zia, primeira tentativa (G0). D√∫zias alvo: ${duziaAlvo.join(
        " e "
      )}`
    );

    if (res.numero === 0) {
      totalZeros++;
      totalGreensDuzia++;
      await enviarTelegram(
        `üü¢ D√öZIAS: N√∫mero 0 caiu! ‚úÖ Green para estrat√©gia de d√∫zia\nüìä D√∫zias: Greens: ${totalGreensDuzia} | Reds: ${totalRedsDuzia}`
      );

      // Marcar este n√∫mero como vencedor
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        estrategia: "duzia",
        dataHora: new Date(),
      };

      resetarAlertaDuzias();
    } else if (duziaAlvo.includes(getDuzia(res.numero))) {
      totalGreensDuzia++;
      await enviarTelegram(
        `üü¢ D√öZIAS: N√∫mero ${res.numero} na d√∫zia ${getDuzia(
          res.numero
        )}! ‚úÖ Green para estrat√©gia de d√∫zia\nüìä D√∫zias: Greens: ${totalGreensDuzia} | Reds: ${totalRedsDuzia}`
      );

      // Marcar este n√∫mero como vencedor
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        estrategia: "duzia",
        dataHora: new Date(),
      };

      resetarAlertaDuzias();
    } else {
      await enviarTelegram(
        `üîÑ D√öZIAS: N√∫mero ${res.numero} na d√∫zia ${getDuzia(
          res.numero
        )}, vamos para o G1 na estrat√©gia de d√∫zia...`
      );
      rodadaG0Duzia = res;
      console.log(
        "Primeira tentativa falhou, indo para G1 na estrat√©gia de d√∫zia"
      );
    }
  }
  // Segunda rodada ap√≥s detectar padr√£o para d√∫zias (G1)
  else if (
    alertaAtivo &&
    duziaAlvo &&
    rodadaG0Duzia &&
    !corAlvo &&
    !colunaAlvo
  ) {
    console.log("Processando G1 para estrat√©gia de d√∫zia");

    if (res.numero === 0) {
      totalZeros++;
      totalGreensDuzia++;
      await enviarTelegram(
        `üü¢ D√öZIAS: N√∫mero 0 caiu! ‚úÖ Green no G1 para estrat√©gia de d√∫zia\nüìä D√∫zias: Greens: ${totalGreensDuzia} | Reds: ${totalRedsDuzia}`
      );

      // Marcar este n√∫mero como vencedor
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        estrategia: "duzia",
        dataHora: new Date(),
      };

      resetarAlertaDuzias();
    } else if (duziaAlvo.includes(getDuzia(res.numero))) {
      totalGreensDuzia++;
      await enviarTelegram(
        `üü¢ D√öZIAS: N√∫mero ${res.numero} na d√∫zia ${getDuzia(
          res.numero
        )}! ‚úÖ Green no G1 para estrat√©gia de d√∫zia\nüìä D√∫zias: Greens: ${totalGreensDuzia} | Reds: ${totalRedsDuzia}`
      );

      // Marcar este n√∫mero como vencedor
      ultimaVitoria = {
        numero: res.numero,
        cor: res.cor,
        estrategia: "duzia",
        dataHora: new Date(),
      };

      resetarAlertaDuzias();
    } else {
      totalRedsDuzia++;
      await enviarTelegram(
        `‚ùå D√öZIAS: N√∫mero ${res.numero} na d√∫zia ${getDuzia(
          res.numero
        )}. ‚ùå Red/perca na estrat√©gia de d√∫zia\nüìä D√∫zias: Greens: ${totalGreensDuzia} | Reds: ${totalRedsDuzia}`
      );

      // Ap√≥s uma derrota, tamb√©m marcaremos o estado para evitar contagens imediatas
      ultimaVitoria = {
        estrategia: "duzia",
        dataHora: new Date(),
      };

      resetarAlertaDuzias();
    }
  }
}

// Fun√ß√£o para resetar alerta de d√∫zias - MODIFICADA
function resetarAlertaDuzias() {
  console.log("Resetando alerta de d√∫zias");
  if (duziaAlvo) {
    alertaAtivo = false;
    duziaAlvo = null;
    rodadaG0Duzia = null;

    // Limpar o hist√≥rico de √∫ltimos oito n√∫meros para for√ßar uma nova contagem
    ultimosOitoNumeros = [];

    console.log(
      "Estrat√©gia de d√∫zias resetada ap√≥s vit√≥ria/derrota. Hist√≥rico de 8 n√∫meros reiniciado."
    );
  }
}

// Processa o √∫ltimo resultado e atualiza as estrat√©gias
async function processarResultado(res) {
  console.log(`Processando resultado: ${res.numero} (${res.cor})`);
  contadorRodadas++;

  // Log detalhado do estado atual para depura√ß√£o
  console.log(`--- ESTADO ATUAL ---`);
  console.log(`Alerta ativo: ${alertaAtivo}`);
  console.log(`Cor alvo: ${corAlvo}`);
  console.log(`Coluna alvo: ${colunaAlvo ? colunaAlvo.join(",") : "null"}`);
  console.log(`D√∫zia alvo: ${duziaAlvo ? duziaAlvo.join(",") : "null"}`);
  console.log(`√öltima vit√≥ria: ${JSON.stringify(ultimaVitoria)}`);
  console.log(`Total n√∫meros no hist√≥rico: ${historico.length}`);
  console.log(
    `Total n√∫meros em ultimosOitoNumeros: ${ultimosOitoNumeros.length}`
  );
  console.log(`-------------------`);

  // Processa estrat√©gia de cores
  await processarEstrategiaCores(res);

  // Processa estrat√©gia de colunas
  await processarEstrategiaColunas(res);

  // Processa estrat√©gia de d√∫zias
  await processarEstrategiaDuzias(res);

  // Envia resumo a cada 100 rodadas
  if (contadorRodadas % 100 === 0) {
    await enviarResumo();
  }

  // Envia relat√≥rio detalhado a cada 200 rodadas
  if (contadorRodadas % 200 === 0) {
    await enviarRelatorioDetalhado();
  }
}

// Envia mensagem para o Telegram
async function enviarTelegram(mensagem) {
  try {
    console.log(`Enviando para Telegram: ${mensagem}`);
    const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;

    const response = await axios.post(url, {
      chat_id: TELEGRAM_CHAT_ID,
      text: mensagem,
    });

    console.log("Mensagem enviada com sucesso");
    return response;
  } catch (err) {
    console.error("Erro ao enviar mensagem para o Telegram:", err.message);
    if (err.response) {
      console.error("Resposta do Telegram:", err.response.data);
    }
  }
}

// Envia resumo das estat√≠sticas
async function enviarResumo() {
  await enviarTelegram(`üìä RESUMO PARCIAL (√∫ltimas ${contadorRodadas} rodadas):
‚úÖ CORES: Greens: ${totalGreensCor} | Reds: ${totalRedsCor} 
‚úÖ COLUNAS: Greens: ${totalGreensColuna} | Reds: ${totalRedsColuna} 
‚úÖ D√öZIAS: Greens: ${totalGreensDuzia} | Reds: ${totalRedsDuzia}
üü¢ Total de Zeros: ${totalZeros}
üìà Total de rodadas: ${contadorRodadas}
üî¥ Maior sequ√™ncia de vermelhos: ${maiorSequenciaVermelho}
‚ö´ Maior sequ√™ncia de pretos: ${maiorSequenciaPreto}`);
}

// Fun√ß√£o para relat√≥rio detalhado a cada 200 rodadas
async function enviarRelatorioDetalhado() {
  await enviarTelegram(`üîç RELAT√ìRIO DETALHADO (RODADA #${contadorRodadas})

üé≤ ESTAT√çSTICAS DE CORES:
‚úÖ Greens: ${totalGreensCor} (${Math.round(
    (totalGreensCor / (totalGreensCor + totalRedsCor || 1)) * 100
  )}% de aproveitamento)
‚ùå Reds: ${totalRedsCor}
üî¥ Maior sequ√™ncia de vermelhos: ${maiorSequenciaVermelho}
‚ö´ Maior sequ√™ncia de pretos: ${maiorSequenciaPreto}

üé≤ ESTAT√çSTICAS DE COLUNAS:
‚úÖ Greens: ${totalGreensColuna} (${Math.round(
    (totalGreensColuna / (totalGreensColuna + totalRedsColuna || 1)) * 100
  )}% de aproveitamento)
‚ùå Reds: ${totalRedsColuna}

üé≤ ESTAT√çSTICAS DE D√öZIAS:
‚úÖ Greens: ${totalGreensDuzia} (${Math.round(
    (totalGreensDuzia / (totalGreensDuzia + totalRedsDuzia || 1)) * 100
  )}% de aproveitamento)
‚ùå Reds: ${totalRedsDuzia}

üü¢ Total de Zeros: ${totalZeros}
üìà Total de rodadas analisadas: ${contadorRodadas}

üì± Bot monitorando 24/7 - Mantenha as apostas respons√°veis!`);
}

// Adicione esta nova fun√ß√£o para enviar o relat√≥rio di√°rio e reiniciar contadores
async function enviarRelatorioDiarioEReiniciar() {
  const hoje = new Date();
  const dataFormatada = hoje.toLocaleDateString('pt-BR', { 
    day: '2-digit', 
    month: '2-digit', 
    year: 'numeric' 
  });
  
  await enviarTelegram(`üìÖ RELAT√ìRIO FINAL DO DIA - ${dataFormatada}

üé≤ RESUMO DAS √öLTIMAS 24 HORAS:
‚úÖ CORES: Greens: ${totalGreensCor} | Reds: ${totalRedsCor} 
‚úÖ COLUNAS: Greens: ${totalGreensColuna} | Reds: ${totalRedsColuna} 
‚úÖ D√öZIAS: Greens: ${totalGreensDuzia} | Reds: ${totalRedsDuzia}
üü¢ Total de Zeros: ${totalZeros}
üìà Total de rodadas analisadas: ${contadorRodadas}

üî¥ Maior sequ√™ncia de vermelhos: ${maiorSequenciaVermelho}
‚ö´ Maior sequ√™ncia de pretos: ${maiorSequenciaPreto}

üíØ TAXA DE APROVEITAMENTO:
üéØ Cores: ${Math.round((totalGreensCor / (totalGreensCor + totalRedsCor || 1)) * 100)}%
üéØ Colunas: ${Math.round((totalGreensColuna / (totalGreensColuna + totalRedsColuna || 1)) * 100)}%
üéØ D√∫zias: ${Math.round((totalGreensDuzia / (totalGreensDuzia + totalRedsDuzia || 1)) * 100)}%

üîÑ Contadores reiniciados para o novo dia.
üì± Bot continua monitorando 24/7 - Boas apostas!`);

  // Reinicia todos os contadores para o novo dia
  totalGreensCor = 0;
  totalRedsCor = 0;
  totalGreensColuna = 0;
  totalRedsColuna = 0;
  totalGreensDuzia = 0;
  totalRedsDuzia = 0;
  totalZeros = 0;
  contadorRodadas = 0;
  
  // N√£o reiniciamos as sequ√™ncias m√°ximas, pois s√£o recordes hist√≥ricos
  // Se quiser reiniciar tamb√©m, descomente as linhas abaixo
  /*
  maiorSequenciaVermelho = 0;
  maiorSequenciaPreto = 0;
  */
  
  console.log("Contadores reiniciados para o novo dia.");
}

// Fun√ß√£o para verificar a mudan√ßa de dia
function verificarMudancaDeDia() {
  const dataAtual = new Date();
  const diaAtual = dataAtual.getDate();
  
  // Se o dia mudou
  if (diaAtual !== ultimoDiaVerificado) {
    console.log(`Dia mudou de ${ultimoDiaVerificado} para ${diaAtual}. Enviando relat√≥rio di√°rio e reiniciando contadores.`);
    
    // Envia o relat√≥rio do dia anterior e reinicia contadores
    enviarRelatorioDiarioEReiniciar();
    
    // Atualiza o dia verificado
    ultimoDiaVerificado = diaAtual;
  }
}


// Inicia o bot
(async function () {
  try {
    console.log("üé≤ Bot da Roleta iniciado!");
    console.log("üîç Monitorando resultados da Lightning Roulette...");

    // Envia mensagem inicial
    await enviarTelegram(
      "üé≤ Bot da Roleta Lightning iniciado! Monitorando resultados..."
    );

    // Executa a primeira vez
    await getRoletaResultado();

    // Configura o intervalo para execu√ß√£o regular (a cada 15 segundos)
    console.log("‚è±Ô∏è Configurando intervalo de execu√ß√£o a cada 30 segundos");
    setInterval(getRoletaResultado, 30000);
    console.log("‚è±Ô∏è Configurando verifica√ß√£o de mudan√ßa de dia a cada minuto");
    setInterval(verificarMudancaDeDia, 60000); // Verifica a cada minuto
  } catch (err) {
    console.error("Erro fatal ao iniciar o bot:", err);
    // Tenta enviar mensagem de erro ao Telegram
    enviarTelegram("‚ùå Erro fatal ao iniciar o bot. Verifique os logs.").catch(
      () => {
        console.error(
          "Tamb√©m n√£o foi poss√≠vel enviar mensagem de erro ao Telegram"
        );
      }
    );
  }
})();

// Inicia servidor Express para manter o bot vivo no Render
const app = express();
const PORT = process.env.PORT || 3000;

app.get("/", (req, res) => {
  res.send("‚úÖ Bot da Roleta est√° rodando!");
});

app.listen(PORT, () => {
  console.log(`üåê Web service ativo na porta ${PORT}`);
});
